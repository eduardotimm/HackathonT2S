// <auto-generated />
using System;
using HackathonT2S.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HackathonT2S.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251009001531_AddCreatedAtToRating")]
    partial class AddCreatedAtToRating
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HackathonT2S.Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RepoURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ProjectID");

                    b.HasIndex("UserID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("HackathonT2S.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AppliedTechniques")
                        .HasColumnType("double");

                    b.Property<string>("AppliedTechniquesJustification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("DataOriginAndProcessing")
                        .HasColumnType("double");

                    b.Property<string>("DataOriginAndProcessingJustification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("FunctionalAdequacy")
                        .HasColumnType("double");

                    b.Property<string>("FunctionalAdequacyJustification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Maintainability")
                        .HasColumnType("double");

                    b.Property<string>("MaintainabilityJustification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("MetricsCostPerformance")
                        .HasColumnType("double");

                    b.Property<string>("MetricsCostPerformanceJustification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Performance")
                        .HasColumnType("double");

                    b.Property<string>("PerformanceJustification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<double>("Reliability")
                        .HasColumnType("double");

                    b.Property<string>("ReliabilityJustification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("SecurityAndGovernance")
                        .HasColumnType("double");

                    b.Property<string>("SecurityAndGovernanceJustification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("TotalScore")
                        .HasColumnType("double");

                    b.Property<double>("Usability")
                        .HasColumnType("double");

                    b.Property<string>("UsabilityJustification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("ValidationAndModelChoice")
                        .HasColumnType("double");

                    b.Property<string>("ValidationAndModelChoiceJustification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RatingID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("HackathonT2S.Models.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MarkdownContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<double>("TotalScore")
                        .HasColumnType("double");

                    b.HasKey("ReportID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("HackathonT2S.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HackathonT2S.Models.Project", b =>
                {
                    b.HasOne("HackathonT2S.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HackathonT2S.Models.Rating", b =>
                {
                    b.HasOne("HackathonT2S.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("HackathonT2S.Models.Report", b =>
                {
                    b.HasOne("HackathonT2S.Models.Project", "Project")
                        .WithMany("Reports")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("HackathonT2S.Models.Project", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("HackathonT2S.Models.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
